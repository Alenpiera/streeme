<?php

/**
 * AlbumTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class AlbumTable extends Doctrine_Table
{
  /**
   * Returns an instance of this class.
   *
   * @return object AlbumTable
   */
  public static function getInstance()
  {
      return Doctrine_Core::getTable('Album');
  }
  
  /**
   * Add an Album to the database or get its key if it exists
   * @param name str: the name of the album to add
   * @return     int: the primary key added or found
   */
  public function addAlbum( $name )
  {
    //is this name already in the collection?
    $q = Doctrine_Query::create()
      ->select( 'a.id' )
      ->from( 'Album a' )
      ->where( 'a.name = ?', $name);
    $result = $q->fetchOne();
     
    if ( is_object( $result ) && $result->id > 0 )
    {
      return $result->id;
    }
    else
    {
      $item = new Album;
      $item->name = $name;
      $item->scan_id = 1;
      $item->save();
      return $item->getId();
    }
  }
  
  /**
   * Fetch the album list
   * @param alpha str: the alphabetical grouping
   * @return      array: of all album entries
   */
  public function getList( $alpha = 'all', $artist_id = 'all')
  {
    $q = Doctrine_Query::create()
      ->select( 'a.id, a.name' )
      ->from( 'Album a, Song s' )
      ->where( 'a.id = s.album_id' );
    if( $alpha !== 'all' )
    {
      $q->andWhere( 'upper( a.name ) LIKE ?', strtoupper( substr( $alpha, 0, 1 ) ) . '%' );
    }
    if( $artist_id !== 'all' )
    {
      $q->andWhere( 's.artist_id = ?', $artist_id );
    }
    $q->distinct();
    $q->orderBy( 'a.name ASC' );
    return $q->fetchArray();
  }
  
  /**
   * Update an album to flag it as scanned but failed to add art for a given source
   * @param album_id int: the album id field to update
   * @param scan_id  int: the scan id
   * @param source   str: the artwork source: amazon|meta|folders|service etc.
   * @return         bool: true if record updated, otherwise false
   */
  public function setAlbumArtSourceScanned( $album_id, $scan_id, $source )
  {
    $id = 0;
    $q = $this->find( $album_id );
    if ( is_object( $q ) )
    {
      switch ( $source )
      {
        case 'amazon':
          $q->amazon_flagged = 1;
          break;
        
        case 'meta':
          $q->meta_flagged = 1;
          break;
          
        case 'folders':
          $q->folders_flagged = 1;
          break;
        
        case 'service':
          $q->service_flagged = 1;
          break;
      }
      $q->scan_id = $scan_id;
      $q->save();
      $id = $q->getId();
      $q->free();
    }

    if ( $id > 0 )
    {
      return true;
    }

    return false;
  }
  
  /**
   * Update an album record to indicate that the scan has successfully retrieved
   * album artwork from a given source
   * @param album_id int: the album id field to updateA
   * @return         bool: true if record updated, otherwise false
   */
  public function setAlbumArtAdded( $album_id, $scan_id, $source )
  {
    $id = 0;
    $q = $this->find( $album_id );
    if ( is_object( $q ) )
    {
      switch ( $source )
      {
        case 'amazon':
          $q->amazon_flagged = 1;
          break;
        
        case 'meta':
          $q->meta_flagged = 1;
          break;
          
        case 'folders':
          $q->folders_flagged = 1;
          break;
        
        case 'service':
          $q->service_flagged = 1;
          break;
      }
      $q->has_art = 1;
      $q->scan_id = $scan_id;
      $q->save();
      $id = $q->getId();
      $q->free();
    }

    if ( $id > 0 )
    {
      return true;
    }

    return false;
  }
  
  /**
   * Get total album count
   * @return       int: total album count in database
   */
  public function getTotalAlbumsCount()
  {
    $q = Doctrine_Query::create()
      ->select( 'a.id' )
      ->from( 'Album a' );
    return $q->count();
  }
  
  /**
   * Get count of albums with album art
   * @return       int: number of albums with art
   */
  public function getAlbumsWithArtCount()
  {
    $q = Doctrine_Query::create()
      ->select( 'a.id' )
      ->from( 'Album a' )
      ->where( 'a.has_art = ?', 1 );
    return $q->count();
  }
}