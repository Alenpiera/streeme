<?php

/**
 * EchonestPropertiesTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EchonestPropertiesTable extends Doctrine_Table
{
  /**
   * Returns an instance of this class.
   *
   * @return object EchonestPropertiesTable
   */
  public static function getInstance()
  {
      return Doctrine_Core::getTable('EchonestProperties');
  }
  
  /**
   * Add echonest song information to the local database
   *
   * @param details arr: key value pairs for echonest song details
   */
  public function setDetails($details = array())
  {
    $this->deleteDetails($details['en_item_id']);
    $echonest_properties = new EchonestProperties();
    foreach(self::$ECHONEST_PARAMS as $parameter)
    {
      $echonest_properties->$parameter = @$details[$parameter];
    }
    $echonest_properties->save();
    $id = $echonest_properties->getId();
    $echonest_properties->free();
    return $id;
  }
  
  /**
   * Delete an old record by en_item_id
   *
   * @param en_item_id str: the unique song id passed to echonest
   * @return           int: the id of the deleted row
   */
  public function deleteDetails($en_item_id)
  {
    $q = Doctrine_Query::create()
    ->delete('EchonestProperties ep')
    ->where('ep.en_item_id= ?', $en_item_id)
    ->execute();
    return $q;
  }
  
  /**
   * Delete the entire catalog
   *
   * @return             int: the id of the deleted row
   */
  public function deleteCatalog()
  {
    $q = Doctrine_Query::create()
    ->delete('EchonestProperties')
    ->execute();
    return $q;
  }
  
  /**
   * Constants for echonest properties
   *
   * @return arr: allowed parameters
   */
  public static $ECHONEST_PARAMS = array(
    'en_version',
    'en_date_added',
    'en_item_id',
    'en_artist_id',
    'en_song_id',
    'en_foreign_id',
    'en_audio_md5',
    'en_mode',
    'en_time_signature',
    'en_key',
    'en_duration',
    'en_loudness',
    'en_energy',
    'en_tempo',
    'en_danceability',
    'en_song_hotttnesss',
    'en_artist_hotttnesss',
    'en_latitude',
    'en_longitude',
    'en_location',
    'en_artist_familiarity'
  );
  
  /**
   * Get a list of float pairs for echonest matching
   *
   * @return arr: the pairs of min max values to match eg(en_tempo_min)
   */
  public static $ECHONEST_RANGES = array(
    'en_duration_min' => 'en_duration_max',
    'en_loudness_min' => 'en_loudness_max',
    'en_energy_min' => 'en_energy_max',
    'en_tempo_min' => 'en_energy_max',
    'en_danceability_min' => 'en_danceability_max',
    'en_song_hotttnesss_min' => 'en_song_hotttnesss_max',
    'en_artist_hotttnesss_min' => 'en_artist_hotttnesss_max',
    'en_artist_familiarity_min' => 'en_artist_familiarity_max',
  );
}